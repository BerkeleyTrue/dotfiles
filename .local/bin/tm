#!/usr/bin/env bb
; vim:ft=clojure
(ns local.bin.tm
  (:require [clojure.string :as str]
            [clojure.tools.cli :refer [parse-opts]]
            [clojure.java.io :as io]))

(import '[java.lang ProcessBuilder$Redirect])

(def specs
  [["-h" "--help"]])

(def help-menu
  (str/join "\n  "
    ["  Usage: tm session-name"
     ""
     ""
     "tm ls -- list out all available work spaces"
     "tm -h -- this menu"]))

(def session-names
  (->>
    [:serv :dev :org]
    (mapv name)
    (mapv (fn [k] [k k]))
    (into (sorted-map))))

(def opts (parse-opts *command-line-args* specs))

; sourced from babashka project
(defn shell-command
  "Executes shell command. Exits script when the shell-command has a non-zero exit code, propagating it.
  Accepts the following options:
  `:input`: instead of reading from stdin, read from this string.
  `:to-string?`: instead of writing to stdoud, write to a string and
  return it."
  ([args] (shell-command args nil))
  ([args {:keys [:input :to-string?]}]
   (let [args (mapv str args)
         pb (cond-> (-> (ProcessBuilder. ^java.util.List args)
                        (.redirectError ProcessBuilder$Redirect/INHERIT))
              (not to-string?) (.redirectOutput ProcessBuilder$Redirect/INHERIT)
              (not input) (.redirectInput ProcessBuilder$Redirect/INHERIT))
         proc (.start pb)]
     (when input
       (with-open [w (io/writer (.getOutputStream proc))]
         (binding [*out* w]
           (print input)
           (flush))))
     (let [string-out
           (when to-string?
             (let [sw (java.io.StringWriter.)]
               (with-open [w (io/reader (.getInputStream proc))]
                 (io/copy w sw))
               (str sw)))
           exit-code (.waitFor proc)]
       (when-not (zero? exit-code)
         (System/exit exit-code))
       string-out))))

(defn attach-session [name] (shell-command ["tmux" "new" "-A" "-s" name]))

(let [is-help? (:help (:options opts))
      name (->>
             (:arguments opts)
             (first))
      session (->>
                name
                (get session-names))]

  (cond
    (or is-help? (empty? name)) (println help-menu)
    (= name "ls") (->>
                   session-names
                   (vals)
                   (str/join "\n - ")
                   (str " - ")
                   (println))

    session (attach-session session)
    :else (println (str name " is not a valid session name"))))

