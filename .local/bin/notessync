#!/bin/bash

set -e
set -o pipefail

_header() {
	local header="$1"
	echo -e "===< $1 >==="
}

_is_dirty() {
	[[ -n $(git status --porcelain --ignore-submodules 2>/dev/null) ]]
}

_notify() {
	dunstify -a "notessync" -i git "$1"
}

_syncdir() {
	cd $1
	name=$(basename $1)
	echo -e "\e[34m$(_header "Syncing $(pwd)")\e[0m"
	git pull || _notify "Error pulling $name"
	git push || _notify "Error pushing $name"
	git status
	_is_dirty && _notify "$name is dirty"
	echo "\e[34m$(_header "done")\e[0m"
}

notessync() {
	set +m
	declare -A outputs=()
	local msg="$(_header "output")\n"
	local switched=false
	local dirs=(
		$HOME/docs/corpus
		$HOME/docs/notes/corpus
		$HOME/docs/notes/captainslog
		$HOME/dvlpmnt/madison-reed/notes
	)

	keybase ctl start

	echo "$(cat ~/.github/active-user)"

	if [[ "$(cat ~/.github/active-user | awk '{print tolower($0)}')" != 'berkeleytrue' ]]; then
		echo -e "\e[32m$(_header "switching gh user")\e[0m\n"
		switched=true
		ghswitch
	fi

	echo -e "\e[32m$(_header "starting")\e[0m\n"
	for dir in ${dirs[@]}; do

		if [[ ! -d $dir ]]; then
			# echo foo in red text
			echo -e "\e[33m$(_header "does not exist: $dir")\e[0m"
			continue
		fi

		outputs[$dir]=$(mktemp /tmp/notessync.XXX)

		{ _syncdir $dir &>${outputs[$dir]} & } 2>/dev/null
	done

	wait

	echo

	for dir in ${dirs[@]}; do
		# check if output exists
		if [[ ! -f ${outputs[$dir]} ]]; then
			continue
		fi

		echo -e "$(cat ${outputs[$dir]})\n"
	done

	## switch back if switched
	if [[ $switched == true ]]; then
		echo -e "\e[32m$(_header "switching gh user back")\e[0m\n"
		ghswitch
	fi

	echo -e "\e[1;32m$(_header "done")\e[0m\n"
	set -m
}

notessync
