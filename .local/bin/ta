#!/bin/bash

# original source https://github.com/WaylonWalker/devtainer/blob/main/bin/.local/bin/ta
# Usage:
# (with no active session) ta => start dev session
# (with active sessions)
#   ta => list all sessions
#   ta proj => list all git
#
#
#
#
#
#
#
#
#

ARG=$1
DEBUG=true
session_name="dev"
path_name="$(basename "$PWD" | tr . -)" # defualt to current directory

not_in_tmux() {
  [ -z "$TMUX" ]
}

log() {
  if $DEBUG; then
    echo "$@"
  fi
}

does_session_exists() {
  # checks if the $session_name exists
  tmux has-session -t "=$session_name"
}

create_session_from_dir() {
  local dir=$1
  local _session_name=$(cd $dir && ls -d */ | sed "s|/||g" | fzf --reverse --header="Select project from $(basename $dir) >")
  local session_name=${_session_name//./_}
  return session_name
}

create_detached_session() {
  local session_name=$1
  local path_name=$2
  TMUX=''
  tmux new-session -Ad -s "$session_name" -c $path_name
}

update_session_for_project() {
  local session_name=$1
  local path_name=$2

  tmux split-window -vb -t "$session_name" -c $path_name -p 70
  tmux send-keys -t "$session_name" "nvim '+Telescope find_files'" Enter
}

create_if_needed_and_attach() {
  local session_name=$1
  local path_name=$2

  if not_in_tmux; then
    tmux new-session -As "$session_name" -c $path_name
  else
    if ! does_session_exists; then
      create_detached_session $session_name $path_name

      if [ ! "$arg" == "--start" ]; then
        update_session_for_project $session_name $path_name
      fi
    fi
    tmux switch-client -t "$session_name"
  fi
}

attatch_to_first_session() {
  local session_name=$1

  log "attach first"
  tmux attach -t $(tmux list-sessions -F "${session_name}" | head -n 1)
  tmux choose-tree -Za
}

log "arg: $ARG"

# If no arguments are passed in try to immediately attach or start without further input
if [ -z "$ARG" ]; then
  if not_in_tmux; then
    tmux attach && exit 1 || ARG="--start"
  else
    exit 1
  fi
fi

# If --start was passed in immediately start a new session based on the current directory
if [ "$ARG" == "--start" ]; then
  log "starting"
elif [ "$ARG" == "proj" ]; then
  session_name=$(gfold $HOME/dvlpmnt | fzf --reverse --header="Select project>")
  echo $session_name
  session_name=
elif [ -d "$ARG" ]; then
  # TODO: change to list gfold output, instead of dirs
  log "Creating from directory"
  # ask the user which directory to start in
  session_name=$(create_session_from_dir $ARG)
  path_name=$ARG/$session_name
fi

log "session name is \"$session_name\""
log "path name is $path_name"

if [ -z "$session_name" ]; then
  # operation cancelled by user
  exit 1
fi

create_if_needed_and_attach $session_name $path_name || attatch_to_first_session $session_name
