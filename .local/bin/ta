#!/bin/bash
TMUX="$TMUX"
DEBUG=false
LOG_FILE=$HOME/.local/share/tmux/ta.log

SCRIPT_NAME=$(basename $0)
MAIN_DIR=$HOME/dvlpmnt

DIR=false
GIT=false
DEV=false
KILL=false
CUR_SESSION=

CWD="$(basename "$PWD" | tr . -)" # default to current directory

if $DEBUG; then
  mkdir -p $HOME/.local/share/tmux >/dev/null 2>&1
fi

log() {
  if $DEBUG; then
    echo "$@" >>$LOG_FILE
  fi
}

parser_definition() {
  setup REST help:usage -- \
    "Usage: $SCRIPT_NAME [options...] [arguments...] [dir-or-session]

  $SCRIPT_NAME -- will attach to first session or create dev session if none available

Options:
"
  flag DIR -d --dir -- "select from list of directories, defaults to searching current directory"
  flag GIT -g --git -- "Select from list of projects, searches directory recursively using gfold"
  flag KILL -k --kill -- "Switches to next session or searches for session-name, killing the current session on success"
  flag DEV --dev -- "Select projects from $MAIN_DIR"
  disp :usage -h --help -- "This menu"
}

eval "$(getoptions parser_definition parse) exit 1"
parse "$@"
eval "set -- $REST"

log "OPTS; DIR:$DIR, GIT:$GIT, KILL:$KILL, DEV:$DEV, Arg:$1"

ARG=$1
set -euo pipefail

path_resolve() {
  if [[ -d "$1" ]]; then
    pushd "$1" >/dev/null
    pwd
    popd >/dev/null
  elif [[ -e "$1" ]]; then
    pushd "$(dirname "$1")" >/dev/null
    echo "$(pwd)/$(basename "$1")"
    popd >/dev/null
  else
    echo "$1" does not exist! >&2
    return 127
  fi
}

not_in_tmux() {
  [ -z "$TMUX" ]
}

is_dir() {
  [ -d "$1" ]
}

is_tmux_running() {
  pgrep tmux >/dev/null 2>&1
}

does_session_exists() {
  # checks if the $session_name exists
  tmux has-session -t "=$1" >/dev/null 2>&1
}

create_detached_session() {
  local session_name=$1
  local path_name=$2
  TMUX=''
  tmux new-session -Ad -s "$session_name" -c $path_name
}

create_session_from_dir() {
  local dir=$1
  local _session_name=$(cd $dir && ls -d */ | sed "s|/||g" | fzf --reverse --header="Select project from $(basename $dir) >")
  local session_name=${_session_name//./_}
  echo $session_name
}

create_if_needed_and_attach() {
  local session_name=$1
  local path_name=$2

  log "create-if-needed; session: $session_name path: $path_name"
  if not_in_tmux; then
    tmux new-session -A -s "$session_name" -c $path_name
  else
    # already in tmux, let's switch
    if ! does_session_exists $session_name; then
      create_detached_session $session_name $path_name
    fi
    log "switch to $session_name"
    tmux switch-client -t "$session_name"
    ensure_kill_session
  fi
}

attach_to_dir_session() {
  local dir=$1
  local session_name=$(create_session_from_dir $dir)
  if [ -z "$session_name" ]; then
    echo "No directory selected"
    exit 1
  fi
  local path_name=$(path_resolve $dir/$session_name)
  log "attach-to-directory; session: $session_name path: $path_name"
  create_if_needed_and_attach $session_name $path_name
}

attach_to_git() {
  local dir=$(path_resolve $1)
  log "attach-to-git: $dir"
  if ! is_dir $dir; then
    echo "git requires directory, but was given $dir" 1>&2
    exit 1
  fi
  local session_name
  local path_name
  res=$(
    gfold $dir |
      awk 'NR%4==1' |
      sed 's/\x1b\[[0-9;]*m//g' |
      fzf --reverse --header="Select project>" || exit 0
  )

  if [ -z "$res" ]; then
    echo "Nothing selected" 1>&2
    exit 1
  fi
  log "attach-to-git: $res"

  session_name=$(echo $res | awk -F ' ~ ' '{print $1}')
  path_name=$(echo $res | awk -F ' ~ ' '{print $2}')

  create_if_needed_and_attach $session_name $path_name
}

attach_to_proj() {
  log "attach-to-proj"
  attach_to_git $MAIN_DIR
}

attach_to_first_session() {
  local session_name=
  if [ $(tmux list-sessions | wc -l) -gt 1 ]; then
    session_name=$(tmux list-sessions -F "#{session_name}" | fzf --reverse --header="Select session>")
  fi

  if [ -z "$session_name" ]; then
    session_name=$(tmux list-sessions -F "#{session_name}" | head -n 1)
  fi

  if [ -z "$session_name" ]; then
    session_name="dev"
  fi

  log "attach-to-first: session_name: $session_name"
  create_if_needed_and_attach $session_name $PWD
}

ensure_kill_session() {
  if [ $KILL ] && [ ! -z "$CUR_SESSION" ]; then
    tmux kill-session -t $CUR_SESSION
  fi
}

log "arg: $ARG"

main() {
  if [ $KILL ] && ! not_in_tmux; then
    CUR_SESSION=$(tmux display-message -p "#S")
  fi

  if [ $DEV ]; then
    attach_to_proj
  elif [ $GIT ]; then
    # ask the user which git project to start in
    attach_to_git $(test $ARG && echo $ARG || echo $CWD)
  elif [ $DIR ]; then
    # ask the user which directory to start in
    attach_to_dir_session $(test $ARG && echo $ARG || echo $CWD)
  elif [ $ARG ] && does_session_exists $ARG; then
    log "named-session: $ARG"
    create_if_needed_and_attach $ARG $PWD
    ensure_kill_session
  else
    log "no args"
    if is_tmux_running; then
      attach_to_first_session
    else
      log "no tmux running"
      create_if_needed_and_attach "dev" $PWD
    fi

  fi
}

main
