hostname := `uname -n`
username := `whoami`
profile := `echo "$(whoami)@$(uname -n)"`

# List all the just commands
default:
  @just --list

[group('desktop')]
build: 
  nix build .\#homeConfigurations."{{profile}}".activationPackage

[group('desktop')]
build-debug: 
  nix build .#homeConfigurations.{{profile}}.activationPackage --show-trace --verbose

[group('desktop')]
build-no-link: 
  nix build .#homeConfigurations.{{profile}}.activationPackage --no-link --print-out-paths

[group('desktop')]
switch:
  #!/usr/bin/env bash
  if [ -z "$TMUX" ]; then
    ./result/home-path/bin/home-manager switch
  else
    echo "Cannot run switch while in a tmux session"
    exit 1
  fi

[group('desktop')]
switch-debug: 
  ./result/home-path/bin/home-manager switch --show-trace --verbose

# Rollback to previous home-manager generation
[group('desktop')]
rollback:
  #!/usr/bin/env bash
  PREV_GEN=$(./result/home-path/bin/home-manager generations | fzf | awk '{print $NF}')
  echo "rolling back to $PREV_GEN"
  $PREV_GEN/activate

# Update all the flake inputs
[group('nix')]
up:
  nix flake update

# Update specific input
# Usage: just upp nixpkgs
[group('nix')]
upd input:
  nix flake update {{input}}

# List all generations of the system profile
[group('nix')]
history:
  nix profile history --profile /nix/var/nix/profiles/system

# Open a nix shell with the flake
[group('nix')]
repl:
  nix repl -f flake:nixpkgs

[group('nix')]
fmt:
  # format the nix files in this repo
  nix fmt .
